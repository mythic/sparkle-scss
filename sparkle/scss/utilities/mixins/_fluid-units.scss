// @file _fluid-units.scss

/// Set a minimum value and maximum value, and use calc() to fluidly go from one
/// to the other in between.
///
/// @author Indrek Paas @indrekpaas
/// @group utilities
/// @link Inspired by 
///   http://madebymike.com.au/writing/precise-control-responsive-typography/
///
/// @require {function} strip-unit
///
/// @param {list} $properties list one or more properties to assign values to
/// @param {string} min-value minimum value for the calculated measurement, the 
///    same units should be used for minimum & maximum (px, em, rem)
/// @param {string} max-value maximum value for the calculated measurement, the 
///    same units should be used for minimum & maximum (px, em, rem)
/// @param {string} min-vw min viewport width the fluid calculations should 
///    start at
/// @param {string} max-vw max viewport width the fluid calculations should end 
///    at
///   
///
/// @example scss - scss
///   .element {
///     @include fluid-units(padding-top padding-bottom, 1em, 4em, em(480), em(1200));
///   }
///
/// @example css - css
///   .element {
///     padding-top: 1em;
///     padding-bottom: 1em;
///   } 
///
///   @media (min-width: 38.75em) {
///     .element {
///       padding-top: calc(1em + 3 * (100vw - 38.75em) / 46.25);
///       padding-bottom: calc(1em + 3 * (100vw - 38.75em) / 46.25);
///     }
///   }
///
///   @media (min-width: 85em) {
///     .element {
///       padding-top: calc(1em + 3 * 1em);
///       padding-bottom: calc(1em + 3 * 1em);
///     }
///   }
@mixin fluid-units($properties, $min-value, $max-value, $min-vw, $max-vw) {
  // Mobile-first: declare the $min-value as the default for any property passed
  @each $property in $properties {
    #{$property}: $min-value;
  }

  // Now declare the creamy, fluid center using a media query at the min-width
  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  // Check the unit and adjust the multiplier accordingly so this can be applied to more than just type
  $multiplier: 1;
  @if unit($min-value) == 'rem' {
    $multiplier: $multiplier * 1rem;
  } @else if unit($min-value) == 'em' {
    $multiplier: $multiplier * 1em;
  } @else {
    $multiplier: $multiplier * 1px;
  }

  // Finally, stop the crazy fluidity and set the max value at the max viewport width
  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * #{$multiplier});
    }
  }
}
